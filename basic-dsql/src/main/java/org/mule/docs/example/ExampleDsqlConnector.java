/**
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 **/
        
/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.docs.example;

import org.mule.api.annotations.*;
import org.mule.common.query.DsqlQuery;
import org.mule.docs.example.connection.DummyConnectionStrategy;
import org.mule.docs.example.dsql.SimpleSyntaxVisitor;
import org.mule.docs.example.metadata.LibraryMetadataCategory;
import org.mule.docs.example.model.Author;
import org.mule.docs.example.model.Book;

import java.util.List;

/**
 * Example Connector for MetaData
 *
 * @author MuleSoft, Inc.
 */
@Connector(name="example", friendlyName = "Example", schemaVersion="1.0-SNAPSHOT")
@MetaDataScope(LibraryMetadataCategory.class)
public class ExampleDsqlConnector {


    @ConnectionStrategy
    DummyConnectionStrategy connectionStrategy;

    /**
     * Creates an entity on the book library service
     *
     * {@sample.xml ../../../doc/example-connector.xml.sample example:query}
     *
     * @param query The query on native (service) language.
     * @return the query result
     */
    @Processor
    public List<Object> query(@Query String query) {
        //CODE FOR EXECUTING THE SERVICE QUERY GOES HERE
        throw new RuntimeException("Query operation isn't defined yet. Translated query is: " + query);
    }

    @QueryTranslator
    public String translate(DsqlQuery queryToTranslate) {
        SimpleSyntaxVisitor simpleVisitor = new SimpleSyntaxVisitor();
        queryToTranslate.accept(simpleVisitor);
        return simpleVisitor.toSimpleQuery();
    }

    private Object createAuthor(Author entityData) {
        //CODE FOR CREATING NEW AUTHOR GOES HERE
        return null;
    }

    private Object createBook(Book entityData) {
        //CODE FOR CREATING A NEW BOOK GOES HERE
        return null;
    }


    public DummyConnectionStrategy getConnectionStrategy() {
        return connectionStrategy;
    }

    public void setConnectionStrategy(DummyConnectionStrategy connectionStrategy) {
        this.connectionStrategy = connectionStrategy;
    }

}
