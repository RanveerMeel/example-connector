/**
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 **/

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.example;

import org.mule.common.query.DefaultQueryVisitor;
import org.mule.common.query.Field;
import org.mule.common.query.Type;
import org.mule.common.query.expression.Value;

import java.util.Iterator;
import java.util.List;

/**
 * <p>Visitor used for translate DSQL to an simple query sintax</p>
 */
public class SimpleSyntaxVisitor extends DefaultQueryVisitor {

    private StringBuilder stringBuilder;

    public SimpleSyntaxVisitor()
    {
        stringBuilder = new StringBuilder();
    }

    @Override
    public void visitFields(java.util.List<org.mule.common.query.Field> fields) {
        StringBuilder select = new StringBuilder();
        select.append("S ");
        Iterator<Field> fieldIterable = fields.iterator();
        while (fieldIterable.hasNext())
        {
            String fieldName = addQuotesIfNeeded(fieldIterable.next().getName());
            select.append(fieldName);
            if (fieldIterable.hasNext())
            {
                select.append(",");
            }
        }

        stringBuilder.insert(0, select);
    }

    @Override
    public void visitTypes(List<Type> types)
    {
        stringBuilder.append(" F ");
        Iterator<Type> typeIterator = types.iterator();
        while (typeIterator.hasNext())
        {
            String typeName = addQuotesIfNeeded(typeIterator.next().getName());
            stringBuilder.append(typeName);
            if (typeIterator.hasNext())
            {
                stringBuilder.append(",");
            }
        }
    }

    @Override
    public void visitAnd()
    {
        stringBuilder.append(" & ");
    }


    @Override
    public void visitOR()
    {
        stringBuilder.append(" | ");
    }

    @Override
    public void visitBeginExpression()
    {
        stringBuilder.append(" W ");
    }

    /**
     * This method translate an Dsql comparison
     * @param operator already translated operator.
     * @param field field to compare.
     * @param value value to compare.
     */
    @Override
    public void visitComparison(String operator, Field field, Value<?> value)
    {
        String name = addQuotesIfNeeded(field.getName());
        stringBuilder.append(name).append(operator).append(value.toString());
    }

    /**
     * Precedence delimiter. init.
     */
    @Override
    public void visitInitPrecedence()
    {
        stringBuilder.append("(");
    }

    /**
     * Precedence delimiter. end.
     */
    @Override
    public void visitEndPrecedence()
    {
        stringBuilder.append(")");
    }

    private String addQuotesIfNeeded(String name) {
        return name.contains(" ") ? "'" + name + "'" : name;
    }

    public String toSimpleQuery()
    {
        return stringBuilder.toString();
    }
}
